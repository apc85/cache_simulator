        -:    0:Source:mainprogram.c
        -:    0:Graph:mainprogram.gcno
        -:    0:Data:mainprogram.gcda
        -:    0:Runs:17
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <ctype.h>
        -:    3:#include <getopt.h>
        -:    4:
        -:    5:#include "confparser.h"
        -:    6:#include "traceparser.h"
        -:    7:#include "datastore.h"
        -:    8:#include "gui.h"
        -:    9:#include "simulator.h"
        -:   10:
        -:   11:#define PROGRAM_NAME "cache_simulator"
        -:   12:#define VERSION "0.1"
        -:   13:
    #####:   14:void printUsage() {
    #####:   15:   printf(
        -:   16:      "Usage: %s [OPTION]... <file>.ini\n"
        -:   17:      "Simulate the memory hierarchy defined in <file>.ini.\n"
        -:   18:      "This a list of the options accepted:\n"
        -:   19:      "\n"
        -:   20:      "  -g    toggle GUI\n"
        -:   21:      "  -h    display this help and exit\n"
        -:   22:      "  -v    output version information and exit\n"
        -:   23:      "\n"
        -:   24:      "Exit status:\n"
        -:   25:      " 0  if OK,\n"
        -:   26:      " 1  if configuration or other kind of errors.\n"
        -:   27:      "\n", PROGRAM_NAME);
    #####:   28:}
        -:   29:
       17:   30:int main(int argc, char *argv[]) {
        -:   31:   int c;
        -:   32:
        -:   33:   // Parse command line arguments
       17:   34:   opterr = 0;
       39:   35:   while ((c = getopt (argc, argv, "vhg")) != -1)
        5:   36:    switch (c)
        -:   37:      {
        -:   38:      case 'g':
        5:   39:         useGUI = !useGUI;
        5:   40:        break;
        -:   41:      case 'v':
    #####:   42:        printf("%s version %s\n",PROGRAM_NAME,VERSION);
    #####:   43:        return 0;
        -:   44:      case 'h':
    #####:   45:        printUsage();
    #####:   46:        return 0;
        -:   47:      case '?':
    #####:   48:        if (optopt == 'c')
    #####:   49:          fprintf (stderr, "Option -%c requires an argument.\n", optopt);
    #####:   50:        else if (isprint (optopt))
    #####:   51:          fprintf (stderr, "Unknown option `-%c'.\n", optopt);
        -:   52:        else
    #####:   53:          fprintf (stderr,
        -:   54:                   "Unknown option character `\\x%x'.\n",
        -:   55:                   optopt);
    #####:   56:        return 1;
        -:   57:      default:
    #####:   58:        abort();
        -:   59:      }
        -:   60:    //printf("\npunto 1\n");
        -:   61:
        -:   62:    // Check that there is at leas one configuration file 
       17:   63:    if(optind == argc) {
        3:   64:       fprintf (stderr, "Must supply a <file>.ini on the command line.\n");
        3:   65:       return 1;
        -:   66:    }
        -:   67:
        -:   68:    //printf("\npunto 2\n");
        -:   69:
        -:   70:    // Read configuration file
        -:   71:    dictionary *ini;
       14:   72:    if((ini = readConfigurationFile(argv[optind])) == NULL) {
        8:   73:       return 1;
        -:   74:    }
        -:   75:
        -:   76:    //printf("\npunto 3\n");
        -:   77:
        -:   78:    // Parse read configuration and populate global configuration variables.
        6:   79:    if(parseConfiguration(ini) != 0) {
    #####:   80:       return 1;
        -:   81:    }
        -:   82: 
        -:   83:    //printf("\npunto 4\n");
        -:   84:
        -:   85:    // Load trace file specified in the configuration file
        6:   86:    if(readTraceFile((char *)cpu.trace_file) != 0) {
    #####:   87:       return 1;
        -:   88:    }
        -:   89:
        -:   90:    //printf("\npunto 5\n");
        -:   91:
        -:   92:    // Create simulator data structures
        6:   93:    generateDataStorage();
        -:   94:
        -:   95:    // Start GUI...
        6:   96:    if(useGUI) {
        3:   97:       generateGUI(argc, argv);
        -:   98:    // ... or run batch simulation
        -:   99:    } else {
        3:  100:       simulate();
        -:  101:    }
        -:  102:
        -:  103:    //printf("\npunto 6\n");
        -:  104:
        -:  105:    // Free memory allocated by readTraceFile()
        6:  106:    freeMemory();
        -:  107:
        6:  108:    return 0;
        -:  109:}
