        -:    0:Source:callbacks.c
        -:    0:Graph:callbacks.gcno
        -:    0:Data:callbacks.gcda
        -:    0:Runs:17
        -:    0:Programs:1
        -:    1:#include "callbacks.h"
        -:    2:#include "datainterface.h"
        -:    3:#include "traceparser.h"
        -:    4:#include "simulator.h"
        -:    5:
        -:    6://CALLBACKS//////////////////////////////////////////////////////////////
        -:    7:
        -:    8:
        -:    9:/**
        -:   10: * Callback function for setting simulation to its initial state.
        -:   11: */
        3:   12:void callbackRestart( GtkWidget *widget, gpointer   data){
        -:   13:   // Reset each cache
        9:   14:   for(int i=0; i<numberCaches; i++){
        -:   15:      // If it is a divided cache, both parts must be reset
        6:   16:      if(caches[i].separated){
        3:   17:         resetDataCache(i);
        3:   18:         resetInstructionCache(i);
        -:   19:      } else {
        3:   20:         resetCache(i);
        -:   21:      }
        -:   22:   }
        3:   23:   resetMemory();
        -:   24:
        -:   25:   // Go to the first line in the trace panel */
        -:   26:   GtkTextIter lineIterCurrent;
        3:   27:   gtk_text_buffer_get_iter_at_mark (buffer, &lineIterCurrent, marcaLineCurrent);
        -:   28:   GtkTextIter start;
        3:   29:   gtk_text_buffer_get_iter_at_offset (buffer, &start, 0);
        3:   30:   GtkTextIter end=lineIterCurrent;
        3:   31:   GtkTextIter lineIterSiguiente=lineIterCurrent;
        3:   32:   gtk_text_view_forward_display_line (GTK_TEXT_VIEW(text_view), &lineIterSiguiente);
        -:   33:   // Remove all tags for removing colour.
        3:   34:   gtk_text_buffer_remove_all_tags (buffer,
        -:   35:         &start,
        -:   36:         &end);
        3:   37:   gtk_text_buffer_get_iter_at_offset (buffer, &lineIterInicial, 0);
        3:   38:   marcaLineCurrent= gtk_text_mark_new (NULL, 1);
        3:   39:   gtk_text_buffer_add_mark (buffer,
        -:   40:         marcaLineCurrent,
        -:   41:         &lineIterInicial);
        -:   42:   // Scroll each panel to first line
        3:   43:   scrollMemoryToPos(0);
        3:   44:   scrollTextViewToLine(0);
        9:   45:   for(int i=0; i<numberCaches; i++){
        6:   46:      if(caches[i].separated){
        3:   47:         scrollDataCacheToRow(i, 0);
        3:   48:         scrollInstructionCacheToRow(i, 0);
        -:   49:      }else{
        3:   50:         scrollCacheToRow(i, 0);
        -:   51:      }
        -:   52:   }
        3:   53:}
        -:   54:
        -:   55:/**
        -:   56: * Callback fuction to perform the complete simulation
        -:   57: */
        3:   58:void callbackSimulateAll( GtkWidget *widget, gpointer   data)
        -:   59:{
        -:   60:   char *currentLine;
       99:   61:   while(currentLine = nextLineTrace()) {
       93:   62:      if(preprocessTraceLine(currentLine)) {
        -:   63:         struct memOperation operation;
       72:   64:         parseLine(currentLine, -1, &operation);
       72:   65:         simulate_step(&operation);
        -:   66:      }
        -:   67:   }
        3:   68:}
        -:   69:
        -:   70:/**
        -:   71: * Callback fuction for advancing one step on simulation 
        -:   72: */
        3:   73:void callbackNextStep( GtkWidget *widget, gpointer   data)
        -:   74:{
        3:   75:   char *currentLine = nextLineTrace();
        3:   76:   if(currentLine!=NULL&&preprocessTraceLine(currentLine)) {
        -:   77:      struct memOperation operation;
    #####:   78:      parseLine(currentLine, -1, &operation);
    #####:   79:      simulate_step(&operation);
        -:   80:   }
        -:   81:
        3:   82:}
        -:   83:
        -:   84:
        -:   85:#if DEBUG
        -:   86:/**
        -:   87: * Callback fuction for testing the program. Only in debug mode
        -:   88: */
        3:   89:void callbackTest( GtkWidget *widget, gpointer   data){
        -:   90:
        -:   91:   //////pruebas
        3:   92:   setStatistics("Cache L2", "Fault rate", "tres");
        3:   93:   setStatistics("CPU", "Fault rate", "tres");
        3:   94:   setStatistics("Cache L3", "nueva categoria", "cuatro");
        3:   95:   setStatistics("Cache NUEVA", "nueva categoria2", "cuatro2");
        -:   96:   char *value;
        3:   97:   value=getStatistics("Cache L1", "Fault rate");
        -:   98:   //printf("valor: %s\n", value);
        3:   99:   value=getStatistics("Cache NUEVA", "nueva categoria2");
        -:  100:   //printf("valor: %s\n", value);
        3:  101:   value=getStatistics("Cache NUEVA", "ia2");
        -:  102:   //printf("valor: %s\n", value);
        3:  103:   value=getStatistics("CaUEVA", "ia2");
        -:  104:   //printf("valor: %s\n", value);
        -:  105:   struct memoryPosition pos;
        3:  106:   pos.address=256;
        3:  107:   pos.content=1024;
        3:  108:   char cadena[]="hola mundo. Este es el contenido del usuario.";
        3:  109:   pos.user_content=cadena;
        3:  110:   writePosicionMemory(&pos, 134217732);
        -:  111:   //showPosicionMemory(9);
        -:  112:   //showPosicionMemory(10);
        -:  113:   //showPosicionMemory(11);
        -:  114:   struct cacheLine line;
        3:  115:   line.tag=2;
        3:  116:   line.line=1;
        3:  117:   line.set=4;
        3:  118:   line.user_content="hola mundo. Este es el contenido del usuario en la linea cache.";
        3:  119:   line.dirty=2;
        3:  120:   line.valid=1;
        3:  121:   line.last_accessed=3;
        3:  122:   line.times_accessed=4;
        3:  123:   line.content=(long[]){1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
        -:  124:   void * user_use;
        -:  125:   //writeLineCacheInstructions(0, &line, 7);
        3:  126:   line.content=(long[]){1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
        3:  127:   writeLineCacheData(0, &line, 7);
        3:  128:   line.content=(long[]){1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
        3:  129:   writeLineCache(1, &line, 7);
        3:  130:   showCacheLineInstructions(0, 7);
        3:  131:   showCacheLineData(0, 7);
        -:  132:   //showCacheLine(1, 7);
        -:  133:   //showCacheLine(1, 6);
        3:  134:   setColorMemoryPosition(134217732, 5);
        3:  135:   setColorDataCacheLine(0, 2, 9);
        3:  136:   setColorInstructionsCacheLine(0, 2, 10);
        -:  137:   //setColorInstructionsCacheLine(0, 2, 11);
        3:  138:   setColorCacheLine(1, 2, 5);
        -:  139:   //free((line).content);
        3:  140:   scrollMemoryToPos(134217832);
        -:  141:   //scrollMemoryToPos(518);
        -:  142:   //scrollDataCacheToRow(0, 32);
        -:  143:   //scrollInstructionCacheToRow(0, 32);
        -:  144:   //scrollCacheToRow(1, 32);
        -:  145:
        3:  146:}
        -:  147:#endif
        -:  148:
        -:  149:
        -:  150:/* Destroy callback. This is used when you close the program*/
        3:  151:void destroy( GtkWidget *widget, gpointer   data )
        -:  152:{
        3:  153:   gtk_main_quit ();
        3:  154:}
        -:  155:
        -:  156:/* Delete_event callback. This is used when you close the program*/
        3:  157:gint delete_event( GtkWidget *widget,
        -:  158:      GdkEvent  *event,
        -:  159:      gpointer   data )
        -:  160:{
        -:  161:   /* If you return FALSE in the "delete_event" signal handler,
        -:  162:    * GTK will emit the "destroy" signal. Returning TRUE means
        -:  163:    * you don't want the window to be destroyed.
        -:  164:    * This is useful for popping up 'are you sure you want to quit?'
        -:  165:    * type dialogs. */
        -:  166:   //g_print ("fin del programa\n");
        -:  167:   /* Change TRUE to FALSE and the main window will be destroyed with
        -:  168:    * a "delete_event". */
        3:  169:   return FALSE;
        -:  170:}
