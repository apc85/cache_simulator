        -:    0:Source:gui.c
        -:    0:Graph:gui.gcno
        -:    0:Data:gui.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:﻿#include <math.h>
        -:    2:#include "gui.h"
        -:    3:#include "datainterface.h"
        -:    4:#include "datastore.h"
        -:    5:#include "callbacks.h"
        -:    6:
        -:    7:int useGUI=1;
        -:    8:
        -:    9:/**
        -:   10: * Function to create the GUI. Data structures for the gui tables must have been created previously.
        -:   11: */
        2:   12:int generateGUI(int argc, char *argv[]) {
        2:   13:   if(!useGUI) {
    #####:   14:      return 0;
        -:   15:   }
        -:   16:   //esto se usara mas adelante. Es para colorear texts.
        2:   17:   tagBlue = gtk_text_buffer_create_tag (buffer, "blue_foreground", "foreground", "blue", NULL);
        2:   18:   tagBlack = gtk_text_buffer_create_tag (buffer, "black_foreground", "foreground", "black", NULL);
        -:   19:   //Esto tabién se usara mas adelante es para recorrer el buffer de text del file trace
        2:   20:   gtk_text_buffer_get_iter_at_offset (buffer, &lineIterInicial, 0);
        2:   21:   marcaLineCurrent= gtk_text_mark_new (NULL, 1);
        2:   22:   gtk_text_buffer_add_mark (buffer,
        -:   23:         marcaLineCurrent,
        -:   24:         &lineIterInicial);
        -:   25:   /* This is called in all GTK applications. Arguments are parsed
        -:   26:    * from the command line and are returned, to the application. */
        2:   27:   gtk_init (&argc, &argv);
        -:   28:   /* create a new window */
        2:   29:   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
        2:   30:   gtk_window_set_default_size(GTK_WINDOW(window), 700, 400);
        -:   31:   /* When the window is given the "delete_event" signal (this is given
        -:   32:    * by the window manager, usually by the "close" option, or on the
        -:   33:    * titlebar), we ask it to call the delete_event () function
        -:   34:    * as defined above. The data passed to the callback
        -:   35:    * function is NULL and is ignored in the callback function. */
        2:   36:   g_signal_connect (G_OBJECT (window), "delete_event",
        -:   37:         G_CALLBACK (delete_event), NULL);
        -:   38:   /* Here we connect the "destroy" event to a signal handler.
        -:   39:    * This event occurs when we call gtk_widget_destroy() on the window,
        -:   40:    * or if we return FALSE in the "delete_event" callback. */
        2:   41:   g_signal_connect (G_OBJECT (window), "destroy",
        -:   42:         G_CALLBACK (destroy), NULL);
        -:   43:   /* Sets the border width of the window. */
        2:   44:   gtk_container_set_border_width (GTK_CONTAINER (window), 5);
        2:   45:   verticalBox= gtk_vbox_new (FALSE, 5);
        2:   46:   gtk_container_add (GTK_CONTAINER (window), verticalBox);
        2:   47:   buttonBox= gtk_hbox_new (FALSE, 10);
        -:   48:   //gtk_container_add (GTK_CONTAINER (verticalBox), buttonBox);
        2:   49:   gtk_box_pack_start (GTK_BOX(verticalBox), buttonBox, FALSE, FALSE, 5);
        2:   50:   button1= gtk_button_new_with_label ("Next step");
        2:   51:   button2= gtk_button_new_with_label ("Simulate all");
        2:   52:   button3= gtk_button_new_with_label ("Restart");
        2:   53:   g_signal_connect (button1, "clicked", G_CALLBACK (callbackNextStep), (gpointer) NULL);
        2:   54:   g_signal_connect (button2, "clicked", G_CALLBACK (callbackSimulateAll), (gpointer) NULL);
        2:   55:   g_signal_connect (button3, "clicked", G_CALLBACK (callbackRestart), (gpointer) NULL);
        -:   56:   //gtk_container_add (GTK_CONTAINER (buttonBox), button1);
        -:   57:   //gtk_container_add (GTK_CONTAINER (buttonBox), button2);
        2:   58:   gtk_box_pack_start (GTK_BOX(buttonBox), button1, FALSE, FALSE, 5);
        2:   59:   gtk_box_pack_start (GTK_BOX(buttonBox), button2, FALSE, FALSE, 5);
        2:   60:   gtk_box_pack_start (GTK_BOX(buttonBox), button3, FALSE, FALSE, 5);
        -:   61:#if DEBUG
        2:   62:   button4= gtk_button_new_with_label ("Test");
        2:   63:   g_signal_connect (button4, "clicked", G_CALLBACK (callbackTest), (gpointer) NULL);
        2:   64:   gtk_box_pack_start (GTK_BOX(buttonBox), button4, FALSE, FALSE, 5);
        -:   65:#endif
        -:   66:   ///creo la tabla para los paneles
        2:   67:   table = gtk_table_new (2, 4, TRUE);
        -:   68:   /* Coloca la tabla en la ventana principal */
        -:   69:   //gtk_container_add (GTK_CONTAINER (verticalBox), table);
        2:   70:   gtk_box_pack_start (GTK_BOX(verticalBox), table, TRUE, TRUE, 5);
        2:   71:   gtk_table_set_row_spacings(GTK_TABLE(table), 10);
        2:   72:   gtk_table_set_col_spacings(GTK_TABLE(table), 10);
        -:   73:   ///creo los buttones
        -:   74:   /* Creo la columna que representa a la memory */
        2:   75:   createPanelMemory();
        6:   76:   for(int i=0; i<numberCaches; i++) {
        4:   77:      createPanelCache(i);
        -:   78:   }
        2:   79:   vboxText  = gtk_vbox_new(FALSE, 2);
        -:   80:   //creo el text view
        -:   81:   //buffer = gtk_text_buffer_new (NULL);
        2:   82:   text_view = gtk_text_view_new_with_buffer (buffer);
        2:   83:   gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_NONE);
        2:   84:   scrolled_window = gtk_scrolled_window_new (NULL, NULL);
        2:   85:   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
        2:   86:   gtk_container_add(GTK_CONTAINER(scrolled_window), text_view);
        -:   87:   //insertTextInPanel("holamundo");
        -:   88:   //creo su tag
        -:   89:   char cadena[200];
        2:   90:   sprintf(cadena, "TRACE FILE: %s", cpu.trace_file);
        -:   91:   GtkWidget *label;
        2:   92:   label =gtk_label_new (cadena);
        2:   93:   create_view_statistics();
        2:   94:   vbox_statistics  = gtk_vbox_new(FALSE, 2);
        -:   95:   //creo el text view
        -:   96:   //buffer = gtk_text_buffer_new (NULL);
        -:   97:   //text_view = gtk_text_view_new_with_buffer (buffer);
        -:   98:   //gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_NONE);
        2:   99:   scrolled_window2 = gtk_scrolled_window_new (NULL, NULL);
        2:  100:   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window2), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
        2:  101:   gtk_container_add(GTK_CONTAINER(scrolled_window2), estatistics_view);
        -:  102:   //insertTextInPanel("holamundo");
        -:  103:   //creo su tag
        2:  104:   sprintf(cadena, "Simulation statistics");
        -:  105:   GtkWidget *label2;
        2:  106:   label2 =gtk_label_new (cadena);
        2:  107:   gtk_box_pack_start(GTK_BOX(vboxText), label, FALSE, FALSE, 1);
        2:  108:   gtk_box_pack_start(GTK_BOX(vboxText), scrolled_window, TRUE, TRUE, 1);
        2:  109:   gtk_box_pack_start(GTK_BOX(vbox_statistics), label2, FALSE, FALSE, 1);
        2:  110:   gtk_box_pack_start(GTK_BOX(vbox_statistics), scrolled_window2, TRUE, TRUE, 1);
        -:  111:   //gtk_container_add (GTK_CONTAINER (scrolled_window), text_view);
        -:  112:   //gtk_container_add (GTK_CONTAINER (scrolled_window), scrolled_window);
        -:  113:   // Coloco los buttones en la tabla
        -:  114:   //printf("%d\n", numberCaches);
        2:  115:   gtk_table_attach_defaults (GTK_TABLE (table), vboxText, 0, 1, 0, 1);
        2:  116:   gtk_table_attach_defaults (GTK_TABLE (table), vbox_statistics, 0, 1, 1, 2);
        2:  117:   gtk_table_attach_defaults (GTK_TABLE (table), vboxMEMORY, numberCaches+1, numberCaches+2, 0, 2);
        6:  118:   for(int i=0; i<numberCaches; i++) {
        4:  119:      if(!caches[i].separated) {
        2:  120:         gtk_table_attach_defaults (GTK_TABLE (table), cacheLevelPanels[i].vboxData, 1+i, 2+i, 0, 2);
        -:  121:      } else {
        2:  122:         gtk_table_attach_defaults (GTK_TABLE (table), cacheLevelPanels[i].vboxData, 1+i, 2+i, 0, 1);
        2:  123:         gtk_table_attach_defaults (GTK_TABLE (table), cacheLevelPanels[i].vboxInstruction, 1+i, 2+i, 1, 2);
        -:  124:      }
        -:  125:   }
        -:  126:   //gtk_table_attach_defaults (GTK_TABLE (table), button2, 1, 2, 0, 2);
        -:  127:   //gtk_table_attach_defaults (GTK_TABLE (table), button3, 2, 3, 0, 2);
        -:  128:   //insertTextInPanel("holamundo");
        -:  129:   /* and the window */
        2:  130:   gtk_widget_show_all(window);
        -:  131:   /* All GTK applications must have a gtk_main(). Control ends here
        -:  132:    * and waits for an event to occur (like a key press or
        -:  133:    * mouse event). */
        2:  134:   gtk_main();
        2:  135:   return 1;
        -:  136:}
        -:  137:
        -:  138:/*
        -:  139: *  Get the next line from the trace file stored in the text widget.
        -:  140: *  
        -:  141: */
      178:  142:char *nextLineTrace() {
        -:  143:   GtkTextIter lineIterCurrent;
      178:  144:   gtk_text_buffer_get_iter_at_mark (buffer, &lineIterCurrent, marcaLineCurrent);
        -:  145:   GtkTextIter start;
      178:  146:   gtk_text_buffer_get_iter_at_offset (buffer, &start, 0);
      178:  147:   GtkTextIter end=lineIterCurrent;
      178:  148:   GtkTextIter lineIterSiguiente=lineIterCurrent;
      178:  149:   gtk_text_view_forward_display_line (GTK_TEXT_VIEW(text_view), &lineIterSiguiente);
        -:  150:   /*
        -:  151:      gtk_text_buffer_remove_tag (buffer,
        -:  152:      tagBlue,
        -:  153:      &start,
        -:  154:      &end);
        -:  155:    */
        -:  156:   //coloreo de negro la linea anterior
      178:  157:   gtk_text_buffer_apply_tag (buffer, tagBlack, &start, &end);
        -:  158:   //coloreo de azul la line current
      178:  159:   gtk_text_buffer_apply_tag (buffer, tagBlue, &lineIterCurrent, &lineIterSiguiente);
        -:  160:   //scroll until new line is visible
      178:  161:   gtk_text_view_scroll_to_iter (GTK_TEXT_VIEW(text_view), &lineIterCurrent, 0.0, 0, 0.0, 0.0);
        -:  162:   //Store the current line
      178:  163:   char *currentLine = gtk_text_buffer_get_text (buffer, &lineIterCurrent, &lineIterSiguiente, 1);
        -:  164:   //printf("%s", lineCurrent);
      178:  165:   gtk_text_view_forward_display_line (GTK_TEXT_VIEW(text_view), &lineIterCurrent);
      178:  166:   gtk_text_buffer_move_mark (buffer, marcaLineCurrent, &lineIterCurrent);
        -:  167:   //gtk_text_buffer_add_mark (buffer, marcaLineCurrent, &lineIterCurrent);
        -:  168:
      178:  169:   if(currentLine[0]=='\0'){
       18:  170:       return NULL;
        -:  171:   }
        -:  172:    
      160:  173:   return currentLine;
        -:  174:}
        -:  175:
        -:  176:/*
        -:  177: * Funtion to create the Memory Panel for the GUI. Memory data structure must have been created previously.
        -:  178: */
        2:  179:GtkWidget * createPanelMemory() {
        -:  180:   GtkTreeIter   iter;
        -:  181:   GtkTreeViewColumn* column;
        2:  182:   vboxMEMORY = gtk_vbox_new(FALSE, 2);
        -:  183:   //createMemoryModel();
        2:  184:   viewMEMORY = gtk_tree_view_new_with_model(GTK_TREE_MODEL(modelMEMORY));
        2:  185:   GtkTreeSelection * selection= gtk_tree_view_get_selection (GTK_TREE_VIEW(viewMEMORY));
        2:  186:   gtk_tree_selection_set_mode (selection, GTK_SELECTION_NONE);
        2:  187:   column = gtk_tree_view_column_new_with_attributes("Address",
        -:  188:         gtk_cell_renderer_text_new(),
        -:  189:         "text", ADDRESS,
        -:  190:         "background", COLOR,
        -:  191:         NULL);
        2:  192:   gtk_tree_view_append_column(GTK_TREE_VIEW(viewMEMORY), column);
        2:  193:   column = gtk_tree_view_column_new_with_attributes("Content",
        -:  194:         gtk_cell_renderer_text_new(),
        -:  195:         "text", CONTENT,
        -:  196:         "background", COLOR,
        -:  197:         NULL);
        2:  198:   gtk_tree_view_append_column(GTK_TREE_VIEW(viewMEMORY), column);
        2:  199:   GtkWidget *scwin = gtk_scrolled_window_new(NULL, NULL);
        2:  200:   gtk_container_add(GTK_CONTAINER(scwin), viewMEMORY);
        2:  201:   gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scwin), GTK_POLICY_AUTOMATIC,
        -:  202:         GTK_POLICY_ALWAYS);
        -:  203:   GtkWidget *label;
        2:  204:   label =gtk_label_new ("MEMORY");
        2:  205:   gtk_box_pack_start(GTK_BOX(vboxMEMORY), label, FALSE, FALSE, 1);
        2:  206:   gtk_box_pack_start(GTK_BOX(vboxMEMORY), scwin, TRUE, TRUE, 1);
        2:  207:   return vboxMEMORY;
        -:  208:}
        -:  209:
        -:  210:/**
        -:  211: * Function to create the GUI panels of a cache level. Cache data structure must have been created previously.
        -:  212: * @param level whose GUI panel will be generated.
        -:  213: *
        -:  214: */
        4:  215:void createPanelCache(int level) {
        -:  216:   //char* mask="11000011";
        4:  217:   const char* mask= caches[level].column_bit_mask;
        -:  218:   //Creo la cache. en caso de que sea dividia esta será la parte de data
        -:  219:   GtkTreeIter   iter;
        -:  220:   GtkTreeViewColumn* column;
        -:  221:   GtkListStore *modelData;
        -:  222:   GtkWidget *vboxData;
        -:  223:   GtkWidget *viewData;
        4:  224:   vboxData = gtk_vbox_new(FALSE, 2);
        4:  225:   int numLines=caches[level].size/caches[level].line_size;
        4:  226:   int asociativity=caches[level].asociativity;
        4:  227:   int numsets=numLines/asociativity;
        4:  228:   int numWords=(caches[level].line_size*8)/cpu.word_width;
        -:  229:   //printf("\ncache level %d: lines: %d, asociativity: %d, sets: %d, words line: %d\n", level+1, numLines, asociativity, numsets, numWords);
        -:  230:   //createCacheModel(level);
        4:  231:   modelData=cacheLevels[level].modelData;
        4:  232:   viewData = gtk_tree_view_new_with_model(GTK_TREE_MODEL(modelData));
        4:  233:   GtkTreeSelection * selectionData= gtk_tree_view_get_selection (GTK_TREE_VIEW(viewData));
        4:  234:   gtk_tree_selection_set_mode (selectionData, GTK_SELECTION_NONE);
        -:  235:   //CREO LAS COLUMNAS A MOSTRAR EN LA TABLA. No confundir con las columnas de la estructura de dados model
        4:  236:   if(mask[LINE]=='1'){
        4:  237:      column = gtk_tree_view_column_new_with_attributes("Line",
        -:  238:            gtk_cell_renderer_text_new(),
        -:  239:            "text", LINE,
        -:  240:            "background", COLOR_CACHE,
        -:  241:            NULL);
        4:  242:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  243:   }
        4:  244:   if(mask[SET]=='1'){
        4:  245:      column = gtk_tree_view_column_new_with_attributes("Set",
        -:  246:            gtk_cell_renderer_text_new(),
        -:  247:            "text", SET,
        -:  248:            "background", COLOR_CACHE,
        -:  249:            NULL);
        4:  250:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  251:   }
        4:  252:   if(mask[VALID]=='1'){
    #####:  253:      column = gtk_tree_view_column_new_with_attributes("valid",
        -:  254:            gtk_cell_renderer_text_new(),
        -:  255:            "text", VALID,
        -:  256:            "background", COLOR_CACHE,
        -:  257:            NULL);
    #####:  258:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  259:   }
        4:  260:   if(mask[DIRTY]=='1'){
    #####:  261:      column = gtk_tree_view_column_new_with_attributes("dirty",
        -:  262:            gtk_cell_renderer_text_new(),
        -:  263:            "text", DIRTY,
        -:  264:            "background", COLOR_CACHE,
        -:  265:            NULL);
    #####:  266:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  267:   }
        4:  268:   if(mask[LAST_ACCESSED]=='1'){
    #####:  269:      column = gtk_tree_view_column_new_with_attributes("last accessed",
        -:  270:            gtk_cell_renderer_text_new(),
        -:  271:            "text", LAST_ACCESSED,
        -:  272:            "background", COLOR_CACHE,
        -:  273:            NULL);
    #####:  274:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  275:   }
        4:  276:   if(mask[TIMES_ACCESSED]=='1'){
    #####:  277:      column = gtk_tree_view_column_new_with_attributes("times accessed",
        -:  278:            gtk_cell_renderer_text_new(),
        -:  279:            "text", TIMES_ACCESSED,
        -:  280:            "background", COLOR_CACHE,
        -:  281:            NULL);
    #####:  282:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  283:   }
        4:  284:   if(mask[TAG]=='1'){
        4:  285:      column = gtk_tree_view_column_new_with_attributes("Tag",
        -:  286:            gtk_cell_renderer_text_new(),
        -:  287:            "text", TAG,
        -:  288:            "background", COLOR_CACHE,
        -:  289:            NULL);
        4:  290:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  291:   }
        4:  292:   if(mask[CONTENT_CACHE]=='1'){
        4:  293:      column = gtk_tree_view_column_new_with_attributes("Content",
        -:  294:            gtk_cell_renderer_text_new(),
        -:  295:            "text", CONTENT_CACHE,
        -:  296:            "background", COLOR_CACHE,
        -:  297:            NULL);
        4:  298:      gtk_tree_view_append_column(GTK_TREE_VIEW(viewData), column);
        -:  299:   }
        -:  300:   ////////////////////////////////////////////////////////
        4:  301:   GtkWidget *scwin = gtk_scrolled_window_new(NULL, NULL);
        4:  302:   gtk_container_add(GTK_CONTAINER(scwin), viewData);
        4:  303:   gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scwin), GTK_POLICY_AUTOMATIC,
        -:  304:         GTK_POLICY_ALWAYS);
        -:  305:   GtkWidget *label;
        -:  306:   //si no es una cache dividida pongo el titulo y return de la funcion
        4:  307:   if(!caches[level].separated) {
        -:  308:      char cadena[50];
        2:  309:      sprintf(cadena, "CACHE L%d", level+1);
        2:  310:      label =gtk_label_new (cadena);
        2:  311:      gtk_box_pack_start(GTK_BOX(vboxData), label, FALSE, FALSE, 1);
        2:  312:      gtk_box_pack_start(GTK_BOX(vboxData), scwin, TRUE, TRUE, 1);
        2:  313:      cacheLevels[level].modelData=modelData;
        2:  314:      cacheLevelPanels[level].vboxData=vboxData;
        2:  315:      cacheLevelPanels[level].viewData=viewData;
        2:  316:      return;
        -:  317:      //si es dividida lo titulo como cache de data y creo la parte correspondiente a instructions
        -:  318:   } else {
        -:  319:      char cadena[50];
        2:  320:      sprintf(cadena, "CACHE L%d DATOS", level+1);
        2:  321:      label =gtk_label_new (cadena);
        2:  322:      gtk_box_pack_start(GTK_BOX(vboxData), label, FALSE, FALSE, 1);
        2:  323:      gtk_box_pack_start(GTK_BOX(vboxData), scwin, TRUE, TRUE, 1);
        2:  324:      cacheLevels[level].modelData=modelData;
        2:  325:      cacheLevelPanels[level].vboxData=vboxData;
        2:  326:      cacheLevelPanels[level].viewData=viewData;
        -:  327:      GtkTreeIter   iterInstruction;
        -:  328:      GtkTreeViewColumn* columnInstruction;
        -:  329:      GtkListStore *modelInstruction;
        -:  330:      GtkWidget *vboxInstruction;
        -:  331:      GtkWidget *viewInstruction;
        2:  332:      vboxInstruction = gtk_vbox_new(FALSE, 2);
        2:  333:      int numLines=caches[level].size/caches[level].line_size;
        2:  334:      int asociativity=caches[level].asociativity;
        2:  335:      modelInstruction=cacheLevels[level].modelInstruction;
        2:  336:      viewInstruction = gtk_tree_view_new_with_model(GTK_TREE_MODEL(modelInstruction));
        2:  337:      GtkTreeSelection * selectionInstruction= gtk_tree_view_get_selection (GTK_TREE_VIEW(viewInstruction));
        2:  338:      gtk_tree_selection_set_mode (selectionInstruction, GTK_SELECTION_NONE);
        -:  339:      //CREO LAS COLUMNAS A MOSTRAR EN LA TABLA. No confundir con las columnas de la estructura de dados model
        2:  340:      if(mask[LINE]=='1'){
        2:  341:         columnInstruction = gtk_tree_view_column_new_with_attributes("Line",
        -:  342:               gtk_cell_renderer_text_new(),
        -:  343:               "text", LINE,
        -:  344:               "background", COLOR_CACHE,
        -:  345:               NULL);
        2:  346:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  347:      }
        2:  348:      if(mask[SET]=='1'){
        2:  349:         columnInstruction = gtk_tree_view_column_new_with_attributes("Set",
        -:  350:               gtk_cell_renderer_text_new(),
        -:  351:               "text", SET,
        -:  352:               "background", COLOR_CACHE,
        -:  353:               NULL);
        2:  354:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  355:      }
        2:  356:      if(mask[VALID]=='1'){
    #####:  357:         columnInstruction = gtk_tree_view_column_new_with_attributes("valid",
        -:  358:               gtk_cell_renderer_text_new(),
        -:  359:               "text", VALID,
        -:  360:               "background", COLOR_CACHE,
        -:  361:               NULL);
    #####:  362:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  363:      }
        2:  364:      if(mask[DIRTY]=='1'){
    #####:  365:         columnInstruction = gtk_tree_view_column_new_with_attributes("dirty",
        -:  366:               gtk_cell_renderer_text_new(),
        -:  367:               "text", DIRTY,
        -:  368:               "background", COLOR_CACHE,
        -:  369:               NULL);
    #####:  370:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  371:      }
        2:  372:      if(mask[LAST_ACCESSED]=='1'){
    #####:  373:         columnInstruction = gtk_tree_view_column_new_with_attributes("last accessed",
        -:  374:               gtk_cell_renderer_text_new(),
        -:  375:               "text", LAST_ACCESSED,
        -:  376:               "background", COLOR_CACHE,
        -:  377:               NULL);
    #####:  378:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  379:      }
        2:  380:      if(mask[TIMES_ACCESSED]=='1'){
    #####:  381:         columnInstruction = gtk_tree_view_column_new_with_attributes("times accessed",
        -:  382:               gtk_cell_renderer_text_new(),
        -:  383:               "text", TIMES_ACCESSED,
        -:  384:               "background", COLOR_CACHE,
        -:  385:               NULL);
    #####:  386:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  387:      }
        2:  388:      if(mask[TAG]=='1'){
        2:  389:         columnInstruction = gtk_tree_view_column_new_with_attributes("Tag",
        -:  390:               gtk_cell_renderer_text_new(),
        -:  391:               "text", TAG,
        -:  392:               "background", COLOR_CACHE,
        -:  393:               NULL);
        2:  394:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  395:      }
        2:  396:      if(mask[CONTENT_CACHE]=='1'){
        2:  397:         columnInstruction = gtk_tree_view_column_new_with_attributes("Content",
        -:  398:               gtk_cell_renderer_text_new(),
        -:  399:               "text", CONTENT_CACHE,
        -:  400:               "background", COLOR_CACHE,
        -:  401:               NULL);
        2:  402:         gtk_tree_view_append_column(GTK_TREE_VIEW(viewInstruction), columnInstruction);
        -:  403:      }
        -:  404:      ///////////////////////////////////////////////////
        2:  405:      GtkWidget *scwinInstruction = gtk_scrolled_window_new(NULL, NULL);
        2:  406:      gtk_container_add(GTK_CONTAINER(scwinInstruction), viewInstruction);
        2:  407:      gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scwinInstruction), GTK_POLICY_AUTOMATIC,
        -:  408:            GTK_POLICY_ALWAYS);
        -:  409:      GtkWidget *labelInstruction;
        -:  410:      char cadenaInstructions[50];
        2:  411:      sprintf(cadenaInstructions, "CACHE L%d INSTRUCCIONES", level+1);
        2:  412:      labelInstruction =gtk_label_new (cadenaInstructions);
        2:  413:      gtk_box_pack_start(GTK_BOX(vboxInstruction), labelInstruction, FALSE, FALSE, 1);
        2:  414:      gtk_box_pack_start(GTK_BOX(vboxInstruction), scwinInstruction, TRUE, TRUE, 1);
        2:  415:      cacheLevels[level].modelInstruction=modelInstruction;
        2:  416:      cacheLevelPanels[level].vboxInstruction=vboxInstruction;
        2:  417:      cacheLevelPanels[level].viewInstruction=viewInstruction;
        2:  418:      return;
        -:  419:   }
        -:  420:}
        -:  421:
        -:  422:/**
        -:  423: * Function to create statistic panel in the gui. The statistics data structure must ghave been created previously.
        -:  424: */
        2:  425:GtkWidget *create_view_statistics(void) {
        -:  426:   GtkTreeViewColumn   *col;
        -:  427:   GtkCellRenderer     *renderer;
        2:  428:   GtkTreeModel *model= estatistics_model;
        2:  429:   GtkWidget *view=     estatistics_view;
        2:  430:   view = gtk_tree_view_new();
        -:  431:   /* --- Column #1 --- */
        2:  432:   col = gtk_tree_view_column_new();
        2:  433:   gtk_tree_view_column_set_title(col, "First Name");
        -:  434:   /* pack tree view column into tree view */
        2:  435:   gtk_tree_view_append_column(GTK_TREE_VIEW(view), col);
        2:  436:   renderer = gtk_cell_renderer_text_new();
        -:  437:   /* pack cell renderer into tree view column */
        2:  438:   gtk_tree_view_column_pack_start(col, renderer, TRUE);
        -:  439:   /* connect 'text' property of the cell renderer to
        -:  440:    *  model column that contains the first name */
        2:  441:   gtk_tree_view_column_add_attribute(col, renderer, "text", COMPONET_OR_PROPERTY);
        -:  442:   /* --- Column #2 --- */
        2:  443:   col = gtk_tree_view_column_new();
        2:  444:   gtk_tree_view_column_set_title(col, "Last Name");
        -:  445:   /* pack tree view column into tree view */
        2:  446:   gtk_tree_view_append_column(GTK_TREE_VIEW(view), col);
        2:  447:   renderer = gtk_cell_renderer_text_new();
        -:  448:   /* pack cell renderer into tree view column */
        2:  449:   gtk_tree_view_column_pack_start(col, renderer, TRUE);
        -:  450:   /* connect 'text' property of the cell renderer to
        -:  451:    *  model column that contains the last name */
        2:  452:   gtk_tree_view_column_add_attribute(col, renderer, "text", VALUE);
        -:  453:   /* set 'weight' property of the cell renderer to
        -:  454:    *  bold print (we want all last names in bold) */
        2:  455:   g_object_set(renderer,
        -:  456:         "weight", PANGO_WEIGHT_BOLD,
        -:  457:         "weight-set", TRUE,
        -:  458:         NULL);
        2:  459:   gtk_tree_view_set_model(GTK_TREE_VIEW(view), model);
        2:  460:   gtk_tree_view_set_headers_visible (GTK_TREE_VIEW(view),0);
        2:  461:   g_object_unref(model); /* destroy model automatically with view */
        2:  462:   gtk_tree_selection_set_mode(gtk_tree_view_get_selection(GTK_TREE_VIEW(view)),
        -:  463:         GTK_SELECTION_NONE);
        2:  464:   estatistics_view= view;
        2:  465:   return view;
        -:  466:}
        -:  467:
        -:  468:/**
        -:  469: * This function inserts text into the panel (actually it is being inserted into the buffer).
        -:  470: * @param text to be added
        -:  471: */
    #####:  472:void insertTextInPanel(char* text) {
        -:  473:   GtkTextBuffer *buffer;
        -:  474:   GtkTextMark *mark;
        -:  475:   GtkTextIter iter;
    #####:  476:   buffer =gtk_text_view_get_buffer(GTK_TEXT_VIEW(text_view));
    #####:  477:   mark = gtk_text_buffer_get_insert (buffer);
    #####:  478:   gtk_text_buffer_get_iter_at_mark (buffer, &iter, mark);
        -:  479:   /* Insert newline (only if there's already text in the buffer). */
        -:  480:   //if (gtk_text_buffer_get_char_count(buffer))
        -:  481:   //gtk_text_buffer_insert (buffer, &iter, "\n", 1);
    #####:  482:   gtk_text_buffer_insert (buffer, &iter, text, -1);
    #####:  483:}
        -:  484:
        -:  485:/**
        -:  486: * Function for scrolling the panel to a text line
        -:  487: * @param line which the panel will be scrolled to.
        -:  488: */
        8:  489:void scrollTextViewToLine(long line) {
        -:  490:   GtkTextIter iter;
        8:  491:   gtk_text_buffer_get_iter_at_line (buffer,
        -:  492:         &iter,
        -:  493:         line);
        -:  494:   //scroll hasta que la nueva line es visible
        8:  495:   gtk_text_view_scroll_to_iter (GTK_TEXT_VIEW(text_view), &iter, 0.0, 0, 0.0, 0.0);
        8:  496:   return;
        -:  497:}
        -:  498:
        -:  499:/**
        -:  500: * Function for scrolling the memory panel to an address
        -:  501: * @param address which the memory panel will be scrolled to.
        -:  502: */
       15:  503:int scrollMemoryToPos(long address) {
        -:  504:   char rowChar[50];
        -:  505:   //if not word address return error
       15:  506:   if(address%(cpu.word_width/8)!=0){
    #####:  507:      return -1;
        -:  508:   }
        -:  509:   //if out of page return error
       15:  510:   if(address<memory.page_base_address || address>(memory.page_base_address+memory.page_size)){
        8:  511:      return -2;
        -:  512:   }
        -:  513:   //get the table row from the memory address
        7:  514:   long i=(address-memory.page_base_address)/(cpu.word_width/8);  
        7:  515:   sprintf(rowChar, "%ld", i);
        7:  516:   GtkTreePath * path=gtk_tree_path_new_from_string (rowChar);
        7:  517:   gtk_tree_view_scroll_to_cell (GTK_TREE_VIEW(viewMEMORY),
        -:  518:         path, NULL, TRUE, 0.5, 0);
        7:  519:   return 0;
        -:  520:}
        -:  521:
        -:  522:/**
        -:  523: * Function for scrolling the cache panel to a row
        -:  524: * @param level which will be scrolled.
        -:  525: * @param row cache line which the cache panel will be scrolled to.
        -:  526: */
        8:  527:void scrollCacheToRow(int level, long row) {
        8:  528:   scrollDataCacheToRow(level, row);
        8:  529:}
        -:  530:
        -:  531:/**
        -:  532: * Function for scrolling the data cache panel to a row
        -:  533: * @param level which will be scrolled.
        -:  534: * @param row cache line which the data cache panel will be scrolled to.
        -:  535: */
       16:  536:void scrollDataCacheToRow(int level, long row) {
        -:  537:   char rowChar[50];
       16:  538:   sprintf(rowChar, "%ld", row);
       16:  539:   GtkTreePath * path=gtk_tree_path_new_from_string (rowChar);
       16:  540:   gtk_tree_view_scroll_to_cell (GTK_TREE_VIEW(cacheLevelPanels[level].viewData),
        -:  541:         path, NULL, TRUE, 0.5, 0);
       16:  542:}
        -:  543:
        -:  544:/**
        -:  545: * Function for scrolling the instruction cache panel to a row
        -:  546: * @param level which will be scrolled.
        -:  547: * @param row cache line which the instruction cache panel will be scrolled to.
        -:  548: */
        8:  549:void scrollInstructionCacheToRow(int level, long row) {
        -:  550:   char rowChar[50];
        8:  551:   sprintf(rowChar, "%ld", row);
        8:  552:   GtkTreePath * path=gtk_tree_path_new_from_string (rowChar);
        8:  553:   gtk_tree_view_scroll_to_cell (GTK_TREE_VIEW(cacheLevelPanels[level].viewInstruction),
        -:  554:         path, NULL, TRUE, 0.5, 0);
        8:  555:}
